/*
 * This class controls all aspects of Input including:
 *		- Keyboard, which keys pressed/released.
 *		- Mouse, buttons pressed & position.
 *
 * Original @author D. Green.
 *
 * © D. Green. 2021.
 */

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// INCLUDES
#include "Input.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CONSTRUCTOR / DESTRUCTOR
Input::Input()
{
	// set default values
	mouse.left = false;
	mouse.right = false;
	mouse.x = 0;
	mouse.y = 0;
}

Input::~Input()
{
	//std::cout << "Input object destroyed!\n";
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// FUNCTIONS
void Input::setButtonState(int buttonIndex, bool state)
{
	buttons[buttonIndex] = state;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Input::isButtonDown(int button)
{
	if (button >= 0)
	{
		return buttons[button];
	}

	return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setKeyDown(int key)
{
	if (key >= 0)
	{
		keys[key] = true;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setKeyUp(int key)
{
	if (key >= 0)
	{
		keys[key] = false;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Input::isKeyDown(int key)
{
	if (key >= 0)
	{
		return keys[key];
	}

	return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setLeftStick(float xAxis, float yAxis)
{
	// This was implemented to take care of controller drift and the fact
	// that the built in SFML function window.setJoystickThreshold(n) doesn't
	// seem to do anything. Drift for my controller was still occurring
	// at 3.0f, and had stopped at 4.0f, but has been set to 10.0f just to be safe
	float threshold = 10.0f;

	if (abs(xAxis) < threshold)
	{
		leftStickPos.x = 0.0f;
	}
	else
	{
		leftStickPos.x = xAxis;
	}

	if (abs(yAxis) < threshold)
	{
		leftStickPos.y = 0.0f;
	}
	else
	{
		leftStickPos.y = yAxis;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

sf::Vector2f Input::getLeftStick()
{
	return leftStickPos;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setMouseX(int lx)
{
	mouse.x = lx;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setMouseY(int ly)
{
	mouse.y = ly;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setMousePosition(int lx, int ly)
{
	setMouseX(lx);
	setMouseY(ly);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Input::getMouseX()
{
	return mouse.x;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int Input::getMouseY()
{
	return mouse.y;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setMouseLDown(bool down)
{
	mouse.left = down;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Input::isMouseLDown()
{
	return mouse.left;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Input::setMouseRDown(bool down)
{
	mouse.right = down;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Input::isMouseRDown()
{
	return mouse.right;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////